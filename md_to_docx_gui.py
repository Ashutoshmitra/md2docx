"""
Markdown to Word Converter GUI
Provides a user interface for converting Markdown files to Word documents.
"""

import os
import sys
import threading
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from PIL import Image, ImageTk
import io
import base64
import requests
from pathlib import Path

# Import the converter module
from md_to_docx_converter import MarkdownToWordConverter

class ConverterApp:
    """GUI application for the Markdown to Word converter."""
    
    def __init__(self, root):
        """Initialize the application."""
        self.root = root
        self.root.title("Markdown to Word Converter")
        self.root.geometry("650x600")
        self.root.resizable(True, True)
        
        # Set application icon
        self.set_app_icon()
        
        # Configure styles
        self.configure_styles()
        
        # Create the main frame
        self.main_frame = ttk.Frame(root, padding="20")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Add CBS branding
        self.add_branding()
        
        # Create input frame
        self.create_input_frame()
        
        # Create template frame
        self.create_template_frame()
        
        # Create output frame
        self.create_output_frame()
        
        # Create conversion frame
        self.create_conversion_frame()
        
        # Initialize conversion status
        self.conversion_in_progress = False
        
        # Set default values
        self.set_defaults()
    
    def set_app_icon(self):
        """Set the application icon."""
        # CBS logo as base64 (replace with actual CBS logo)
        icon_data = """
        
        """
        
        try:
            icon_data_decoded = base64.b64decode(icon_data)
            icon_image = Image.open(io.BytesIO(icon_data_decoded))
            
            # Convert to PhotoImage for tkinter
            icon_photo = ImageTk.PhotoImage(icon_image)
            self.root.iconphoto(True, icon_photo)
        except Exception as e:
            print(f"Could not set icon: {e}")
    
    def configure_styles(self):
        """Configure ttk styles."""
        style = ttk.Style()
        
        # Configure button style
        style.configure('TButton', font=('Arial', 12))
        style.configure('Primary.TButton', foreground='white', background='#0066cc')
        
        # Configure label style
        style.configure('TLabel', font=('Arial', 11))
        style.configure('Header.TLabel', font=('Arial', 14, 'bold'))
        
        # Configure frame style
        style.configure('Section.TFrame', padding=10)
    
    def add_branding(self):
        """Add CBS branding to the application."""
        # Create a frame for the logo
        logo_frame = ttk.Frame(self.main_frame)
        logo_frame.pack(fill=tk.X, pady=(0, 15))
        
        # CBS logo as base64 (replace with actual CBS logo)
        logo_data = """
        
        """
        
        try:
            logo_data_decoded = base64.b64decode(logo_data)
            logo_image = Image.open(io.BytesIO(logo_data_decoded))
            logo_image = logo_image.resize((200, 50), Image.LANCZOS)
            
            # Convert to PhotoImage for tkinter
            self.logo_photo = ImageTk.PhotoImage(logo_image)
            
            # Create and add logo label
            logo_label = ttk.Label(logo_frame, image=self.logo_photo)
            logo_label.pack(side=tk.LEFT)
            
            # Add title label
            title_label = ttk.Label(
                logo_frame, 
                text="Markdown to Word Converter", 
                style='Header.TLabel'
            )
            title_label.pack(side=tk.RIGHT, padx=10)
            
        except Exception as e:
            # Fallback if logo can't be loaded
            title_label = ttk.Label(
                logo_frame, 
                text="CBS - Markdown to Word Converter", 
                style='Header.TLabel'
            )
            title_label.pack(side=tk.LEFT)
            print(f"Could not load logo: {e}")
    
    def create_input_frame(self):
        """Create frame for input file/folder selection."""
        input_frame = ttk.LabelFrame(
            self.main_frame, 
            text="Input Selection", 
            padding="10",
            style='Section.TFrame'
        )
        input_frame.pack(fill=tk.X, pady=5)
        
        # Create radio buttons for file/folder selection
        self.input_type = tk.StringVar(value="file")
        
        ttk.Radiobutton(
            input_frame, 
            text="Single File", 
            variable=self.input_type, 
            value="file",
            command=self.update_ui
        ).grid(row=0, column=0, padx=5, sticky=tk.W)
        
        ttk.Radiobutton(
            input_frame, 
            text="Folder (All .md files)", 
            variable=self.input_type, 
            value="folder",
            command=self.update_ui
        ).grid(row=0, column=1, padx=5, sticky=tk.W)
        
        # Create input path entry and button
        ttk.Label(input_frame, text="Path:").grid(
            row=1, column=0, sticky=tk.W, pady=5
        )
        
        self.input_path = tk.StringVar()
        input_entry = ttk.Entry(input_frame, textvariable=self.input_path, width=50)
        input_entry.grid(row=1, column=1, sticky=tk.EW, padx=5)
        
        browse_button = ttk.Button(
            input_frame, 
            text="Browse...", 
            command=self.browse_input
        )
        browse_button.grid(row=1, column=2, padx=5)
        
        # Configure grid to expand
        input_frame.columnconfigure(1, weight=1)
    
    def create_template_frame(self):
        """Create frame for template selection."""
        template_frame = ttk.LabelFrame(
            self.main_frame, 
            text="Word Template", 
            padding="10",
            style='Section.TFrame'
        )
        template_frame.pack(fill=tk.X, pady=5)
        
        # Create template path entry and button
        ttk.Label(template_frame, text="Template:").grid(
            row=0, column=0, sticky=tk.W, pady=5
        )
        
        self.template_path = tk.StringVar()
        template_entry = ttk.Entry(template_frame, textvariable=self.template_path, width=50)
        template_entry.grid(row=0, column=1, sticky=tk.EW, padx=5)
        
        browse_template_button = ttk.Button(
            template_frame, 
            text="Browse...", 
            command=self.browse_template
        )
        browse_template_button.grid(row=0, column=2, padx=5)
        
        # Configure grid to expand
        template_frame.columnconfigure(1, weight=1)
    
    def create_conversion_frame(self):
        """Create frame for conversion controls and status."""
        conversion_frame = ttk.Frame(self.main_frame, padding="10")
        conversion_frame.pack(fill=tk.X, pady=10)
        
        # Create progress bar
        self.progress = ttk.Progressbar(
            conversion_frame, 
            orient=tk.HORIZONTAL, 
            length=500, 
            mode='determinate'
        )
        self.progress.pack(fill=tk.X, pady=10)
        
        # Create status label
        self.status_var = tk.StringVar(value="Ready")
        status_label = ttk.Label(
            conversion_frame, 
            textvariable=self.status_var,
            font=('Arial', 10)
        )
        status_label.pack(fill=tk.X, pady=5)
        
        # Create button frame
        button_frame = ttk.Frame(conversion_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        # Create convert button
        self.convert_button = ttk.Button(
            button_frame, 
            text="Convert",
            command=self.start_conversion,
            style='Primary.TButton',
            width=15
        )
        self.convert_button.pack(side=tk.LEFT, padx=5)
        
        # Create close button
        close_button = ttk.Button(
            button_frame, 
            text="Close",
            command=self.close_application,
            width=15
        )
        close_button.pack(side=tk.RIGHT, padx=5)
    
    def create_output_frame(self):
        """Create frame for output location selection."""
        output_frame = ttk.LabelFrame(
            self.main_frame, 
            text="Output Location", 
            padding="10",
            style='Section.TFrame'
        )
        output_frame.pack(fill=tk.X, pady=5)
        
        # Create checkbox for using the same location
        self.use_same_location = tk.BooleanVar(value=True)
        same_location_check = ttk.Checkbutton(
            output_frame,
            text="Save in the same location as input",
            variable=self.use_same_location,
            command=self.update_ui
        )
        same_location_check.grid(row=0, column=0, columnspan=3, sticky=tk.W, pady=5)
        
        # Create output path entry and button
        ttk.Label(output_frame, text="Output path:").grid(
            row=1, column=0, sticky=tk.W, pady=5
        )
        
        self.output_path = tk.StringVar()
        self.output_entry = ttk.Entry(output_frame, textvariable=self.output_path, width=50)
        self.output_entry.grid(row=1, column=1, sticky=tk.EW, padx=5)
        
        self.browse_output_button = ttk.Button(
            output_frame, 
            text="Browse...", 
            command=self.browse_output
        )
        self.browse_output_button.grid(row=1, column=2, padx=5)
        
        # Configure grid to expand
        output_frame.columnconfigure(1, weight=1)
    
    def set_defaults(self):
        """Set default values and initial UI state."""
        # Update UI based on initial settings
        self.update_ui()
    
    def update_ui(self):
        """Update UI based on current selections."""
        # Update output fields based on checkbox
        if self.use_same_location.get():
            self.output_entry.configure(state='disabled')
            self.browse_output_button.configure(state='disabled')
        else:
            self.output_entry.configure(state='normal')
            self.browse_output_button.configure(state='normal')
    
    def browse_input(self):
        """Browse for input file or folder."""
        if self.input_type.get() == "file":
            file_path = filedialog.askopenfilename(
                title="Select Markdown File",
                filetypes=[("Markdown files", "*.md"), ("All files", "*.*")]
            )
            if file_path:
                self.input_path.set(file_path)
                # Update output path if same location is selected
                if self.use_same_location.get():
                    output_dir = os.path.dirname(file_path)
                    base_name = os.path.splitext(os.path.basename(file_path))[0]
                    self.output_path.set(os.path.join(output_dir, f"{base_name}.docx"))
        else:
            folder_path = filedialog.askdirectory(title="Select Folder with Markdown Files")
            if folder_path:
                self.input_path.set(folder_path)
                # Update output path if same location is selected
                if self.use_same_location.get():
                    self.output_path.set(folder_path)
    
    def browse_template(self):
        """Browse for Word template."""
        file_path = filedialog.askopenfilename(
            title="Select Word Template",
            filetypes=[
                ("Word templates", "*.dotx"), 
                ("Word documents", "*.docx"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.template_path.set(file_path)
    
    def browse_output(self):
        """Browse for output location."""
        if self.input_type.get() == "file":
            # For single file, suggest output file
            file_path = filedialog.asksaveasfilename(
                title="Save Word Document As",
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx"), ("All files", "*.*")]
            )
            if file_path:
                self.output_path.set(file_path)
        else:
            # For folder, select output directory
            folder_path = filedialog.askdirectory(title="Select Output Folder")
            if folder_path:
                self.output_path.set(folder_path)
    
    def start_conversion(self):
        """Start the conversion process."""
        # Validate inputs
        if not self.validate_inputs():
            return
        
        # Disable UI during conversion
        self.toggle_ui_state(False)
        
        # Reset progress bar
        self.progress['value'] = 0
        self.status_var.set("Starting conversion...")
        
        # Start conversion in a separate thread
        self.conversion_thread = threading.Thread(target=self.perform_conversion)
        self.conversion_thread.daemon = True
        self.conversion_thread.start()
    
    def validate_inputs(self):
        """Validate user inputs before conversion."""
        # Check input path
        input_path = self.input_path.get()
        if not input_path:
            messagebox.showerror("Error", "Please select an input file or folder.")
            return False
        
        if self.input_type.get() == "file" and not os.path.isfile(input_path):
            messagebox.showerror("Error", "Selected input file does not exist.")
            return False
        
        if self.input_type.get() == "folder" and not os.path.isdir(input_path):
            messagebox.showerror("Error", "Selected input folder does not exist.")
            return False
        
        # Check template (optional)
        template_path = self.template_path.get()
        if template_path and not os.path.isfile(template_path):
            messagebox.showerror("Error", "Selected template file does not exist.")
            return False
        
        # Check output path if not using same location
        if not self.use_same_location.get():
            output_path = self.output_path.get()
            if not output_path:
                messagebox.showerror("Error", "Please specify an output location.")
                return False
        
        return True
    
    def toggle_ui_state(self, enabled):
        """Enable or disable UI elements during conversion."""
        state = 'normal' if enabled else 'disabled'
        
        # Update state for all interactive elements
        self.convert_button.configure(state=state)
        
        # Only update output fields if not using same location
        if not self.use_same_location.get():
            self.output_entry.configure(state=state)
            self.browse_output_button.configure(state=state)
    
    def perform_conversion(self):
        """Perform the actual conversion in a separate thread."""
        try:
            # Initialize converter with template if specified
            template_path = self.template_path.get() or None
            converter = MarkdownToWordConverter(template_path)
            
            # Get input and output paths
            input_path = self.input_path.get()
            
            if self.use_same_location.get():
                output_path = None  # Let the converter determine the output path
            else:
                output_path = self.output_path.get()
            
            # Update status
            self.status_var.set("Converting...")
            self.root.update_idletasks()
            
            # Perform conversion based on input type
            if self.input_type.get() == "file":
                # Convert single file
                self.progress['value'] = 10
                self.root.update_idletasks()
                
                output_file = converter.convert_file(input_path, output_path)
                
                self.progress['value'] = 100
                self.status_var.set(f"Conversion complete: {output_file}")
            else:
                # Convert all files in folder
                self.status_var.set("Scanning folder...")
                self.root.update_idletasks()
                
                # Count markdown files
                md_files = [f for f in os.listdir(input_path) if f.lower().endswith('.md')]
                total_files = len(md_files)
                
                if total_files == 0:
                    self.status_var.set("No Markdown files found in the folder.")
                    self.progress['value'] = 100
                else:
                    # Convert each file
                    output_files = converter.convert_directory(input_path, output_path)
                    
                    self.progress['value'] = 100
                    self.status_var.set(f"Converted {len(output_files)} files.")
            
        except Exception as e:
            self.status_var.set(f"Error: {str(e)}")
            messagebox.showerror("Conversion Error", str(e))
        finally:
            # Re-enable UI
            self.root.after(100, lambda: self.toggle_ui_state(True))
    
    def close_application(self):
        """Close the application and clean up."""
        # Add any necessary cleanup here
        self.root.destroy()
        sys.exit(0)

def main():
    """Main entry point for the application."""
    root = tk.Tk()
    app = ConverterApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()